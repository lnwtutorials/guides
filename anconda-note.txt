-------------
Getting Start
-------------
**************************
# source /opt/anaconda3/bin/activate
# conda init
# anaconda-navigator
**************************
anaconda            anaconda-navigator  anaconda-project    anacron

(Disable Base)
conda config --set auto_activate_base False
 -----------------------
| conda Managing Package |
 -----------------------
# conda list
# conda install <pycurl>
# conda remove <pycurl>

 -------------------------
| anaconda Usefull Command |
 -------------------------
# anaconda -V
# anaconda whoami
# anaconda show
# anaconda -h

$ anaconda show pycharm
$ anaconda show chen/pycharm | less

https://repo.anaconda.com/
https://repo.anaconda.com/pkgs/
https://repo.anaconda.com/archive/
https://docs.anaconda.com/anaconda/user-guide/faq/





-------------------------------------------------------------------------
============ conda ================
• Conda is a cross platform package and environment management system 
• Written and maintained by Anaconda, Inc 
• Open Source, BSD licensed 
• Packages software written in any language 
• Many Python and R data science, machine learning and AI frameworks 
• Packages are binaries, no compiler or libraries are needed 
• Does not require administrator privileges 
• Available by installing the Anaconda Distribution or Miniconda

conda : package management
conda manages binary conda packages 
• conda install : install one or more package(s) 
• conda remove : remove a package 
• conda update : update a package 
• conda list : list the installed packages

conda : environments
Conda can create isolated environments that have their own set of packages. 
• conda create : create a new conda environment 
• conda activate : activate a conda environment 
• conda deactivate : deactivate the current conda environment Environments are great when you need to work with a different version of the same library or application. For example Python 2.7 and 3.7.

conda : channels
Conda packages are provided from different repositories, called channels. 
Some key channels are: 
• defaults : packages from Anaconda, Inc 
• conda-forge : large community led collection of packages 
• bioconda : community collection of bioinformatics packages

conda : finding packages
Conda packages are available from the Anaconda repository and from the Anaconda cloud (Anaconda.org). 
There are a number of methods for finding conda packages: 
• conda search : search for package in currently selected channels 
• anaconda search : search for package on Anaconda.org Anaconda.org also has a search feature.

conda : packages
A conda package is a compressed tarball containing system libraries, Python modules, executable programs or other components. Packages contain binaries. No compilation is needed at install or run time. Metadata is included with the package in the “info” directory. 
Tools for working with conda packages: 
• conda build : Build a conda package 
• anaconda upload : Upload a package to Anaconda.org 

Anaconda Distribution Installers
The Anaconda Distribution is a curated collection of data science libraries. 
• Over 150 packages are installed automatically 
• Rigorously tested for compatibility 
• Additional packages can be installed using conda 
• Available for Python 2.7 and 3.7 
• Released quarterly 
• Latest release is 5.3, next release is expected mid-December Miniconda includes just the core packages required to run conda.

pip
• Installs Python packages from the Python Package Index, PyPI 
• Recommended by the Python Packaging Authority (PyPA) 
• Open Source, MIT licensed 
• Installs wheels (binary) and source distributions 
• Source distributions may require that the system has compatible compilers or system libraries installed
Differences between conda and pip
Pip
• Installs Python packages 
• Binaries (wheels) and source distributions 
• virtualenv or venv needed to create isolated environment. 
• Resolves dependencies recursively Conda 
• Installs software written in any language 
• Packages are binaries 
• Built in support for creating isolated environments 
• Uses a SAT solver for dependency resolution

Combining conda and pip
Sometimes software is not available as a conda package 
• 1,500+ packages available in the Anaconda repository 
• 4,000+ packages in the bioconda channel 
• 5,500+ packages in the conda-forge channel 
• 150,000+ packages available on PyPI When not available as a conda package, installing via pip is reasonable

Issues with conda and pip
Issues can arise when conda and pip are used together 
• conda has a limited ability to control packages that pip installs 
• pip may upgrade or remove a package which conda requires 
• repeatedly using conda and pip can create a state which is hard to reproduce 
• Issues can be cosmetic or cause the environment to evolve into a unusable state 
• One solution is to use conda-build to build all packages

• Use pip only after conda 
- install as many requirements as possible with conda, then use pip 
- pip should be run with --upgrade-strategy only-if-needed (the default) 
- Do use pip with the --user argument, avoid all “users” installs Best practices

• Use pip only after conda
• Use conda environments for isolation
- create a conda environment to isolate any changes pip makes 
- environments take up little space thanks to hard links 
- care should be taken to avoid running pip in the “root” environment Best practices

• Use pip only after conda
• Use conda environments for isolation 
• Recreate the environment if changes are needed
- once pip has been used conda will be unaware of the changes 
- to install additional conda packages it is best to recreate the environment Best practices

• Use pip only after conda
• Use conda environments for isolation 
• Recreate the environment if changes are needed 
• Store conda and pip requirements in text files
- package requirements can be passed to conda via the --file argument 
- pip accepts a list of Python packages with -r or --requirements 
- conda env will export or create environments based on a file with conda and pip requirements Best practices

Pip and conda are different tools
• pip installs Python package 
• conda install any type of software When combining pip and conda 
• Use pip only after conda 
• Use conda environments for isolation 
• Recreate the environment if changes are needed 
• Store conda and pip requirements in text files Summary

next Conda documentation https://conda.io Schedule an Anaconda Enterprise Demo ambassador@anaconda.com Learn about consulting, training, and support ambassador@anaconda.com
https://www.slideshare.net/secret/4uorZm8tY0nKQJ
-------------------------------------------------------------------------
CONDA : Tips & Tricks
(https://www.slideshare.net/continuumio/conda-tips-and-tricks-anacondacon-2018)
• Do you use conda? 
• Do you want to use conda (better)? 
- data scientists 
- Python users 
- R users 
- sysadmins 
- devops engineers 
_ full stack software engineers 
- everybody is welcome

Google> miniconda copy link 
$ wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh 
$ bash Miniconda3-latest-MacOSX-x86_64.sh –bfp ~/conda set up (and restart) your shell 
$ conda update conda
http://lmgtfy.com/?q=how+do+I+install+conda%3F


$ conda install --help 
$ conda config --describe Get some --help 
Core commands
• create 
• install 
• update 
• remove 
Auxiliary commands
• config 
• list 
• search 
• clean 
• info

Conda is an executable shell function!?
• conda activate is the new source activate (or activate on Windows) 
• What does it even mean to “activate” an environment? 
• Learn how PATH works, and learn the tools to understand path resolution 
- which -a 
- type -a 
- where 
• Consider $ conda config --set max_shlvl 1

$ conda install flask-migrate Working with packages that aren’t in defaults 

PackagesNotFoundError: The following packages are not available from current channels Search for it on anaconda.org! 
$ conda install -c conda-forge flask-migrate 
$ conda config --add channels conda-forge 
$ conda config --append channels conda-forge 
$ conda install conda-forge::flask-migrate
 
Easy builds of conda packages for python
> conda skeleton pypi twilio && conda build !$
• Stick with pure-python packages! If the build wants to invoke a compiler, transition to a full conda-build recipe. 
• Check setup.py to make sure it squares with the recipe. 
• Make sure to use the local channel. 
$ conda install -c local twilio 
$ conda install local::twilio 
$ conda config --add channels local 
$ conda install --use-local twilio

Use conda to manage a python project I’m actively developing on
conda create -p ./devenv --file requirements.txt --file dev/test-requirements.txt 
conda activate ./devenv 
python setup.py develop # (pip install -e .) 
- • Notice no ‘conda env’ commands.

Configure for security and safety
.........................................................................................................................
conda config --describe [CONFIG_PARAM] 
conda config --show-sources 
conda config --show [CONFIG_PARAM] 

Lock it down! 
 # location: /etc/conda/.condarc 
aggressive_update_packages: 
- ca-certificates 
- certifi 
- openssl 

allow_softlinks: False #!final 
always_softlink: False #!final 
channel_alias: https://conda.anaconda.org #!final 
channels: #!final 
- defaults 
- conda-forge 

default_channels: #!final 
- https://repo.anaconda.com/pkgs/main 
- https://repo.anaconda.com/pkgs/free 
- https://repo.anaconda.com/pkgs/r 
- https://repo.anaconda.com/pkgs/pro 

disallowed_packages: 
- bad-package 
# non_admin_enabled: false #!final 
# ^^ danger! this will disable conda for ever non-root user 

override_channels_enabled: false #!final 
path_conflict: warn #!final 
# ^^ or better, prevent 
safety_checks: enabled #!final 
ssl_verify: true #!final 
# ^^ or path to internal cert bundle 
whitelist_channels: #!final 
- conda-forge 
- defaults 
https://www.anaconda.com/blog/developer-blog/conda-configuration-engine-power-users
........................................................................................................................................
conda search --envs openssl 
conda search --envs 'openssl<1.0.2o' --json | jq .[].location | xargs -n1 conda update --dry-run openssl -p conda search --envs conda-forge::* Update openssl in all my environments

https://github.com/conda/conda/issues/7059
https://github.com/pypa/pip/issues/5081
1. import conda.cli.python_api 
2. import conda.api 
3. import conda.exports 
As of conda 4.4, you can install conda into any environment, not just those that start with ‘_’ (underscore). You can import conda!

CONDA & DOCKER (Conda and Docker)
• You still have to get the software bits into the container somehow! 
• if [ -f "/etc/redhat-release" ]; then sudo yum -y install httpd else 
- sudo apt-get -y install apache2 
- fi
• Anaconda, Inc. maintains docker containers on dockerhub. Currently at https://hub.docker.com/r/continuumio/ 
• Talk to me about cloning (conda create --clone) an environment into a container. 
Roll back to previous environment state
$ conda list --revisions 
$ conda install --revision NUM 

Conda clean --packages
• Only cleans non-linked packages. 
• How does conda know if a package is linked? 
• Hard-links are really cool! Major disk space savings across environments. 
• If you have a lot of conda environments, du and your other disk space tools are probably lying to you. 

Prune packages
As of conda 4.4, conda distinguishes between user-requested packages and packages that were brought into an environment only to satisfy dependencies of user-requested packages. Pruning removes no-longer-needed packages.
conda create -n prune-me python flask 
conda remove -n prune-me flask --prune 
conda list -n prune-me 

Multi-user mode
• sudo (just don’t) 
• But… 
• Just don’t. 
• You have conda now. 
• If you have to use ‘sudo’ in front of ‘pip 
install’, you’re probably doing it wrong. 
• Same goes for conda. 
• But… if you must… sudo su root –c “conda install ...” 
• Note the implications on envs_dirs and pkgs_dirs. 

TODO (right now)
• Sign up for Conda Announcements 
- https://bit.ly/conda-announcements 
• Give conda some love (err) 
- https://github.com/conda/conda 
• Use the canary channel 
- $ conda config --add channels conda-canary 
• Send us error reports 
- $ conda config --set report_errors true 

More fun with conda channels
conda config --describe channel_alias 
conda config --describe custom_channels 
conda config --describe custom_multichannels
